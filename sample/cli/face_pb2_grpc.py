# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import face_pb2 as face__pb2


class FaceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectFace = channel.unary_unary(
                '/face.FaceService/DetectFace',
                request_serializer=face__pb2.DetectFaceRequest.SerializeToString,
                response_deserializer=face__pb2.DetectFaceResponse.FromString,
                )
        self.VerifyFaceFeature = channel.unary_unary(
                '/face.FaceService/VerifyFaceFeature',
                request_serializer=face__pb2.VerifyFaceFeatureRequest.SerializeToString,
                response_deserializer=face__pb2.VerifyFaceFeatureResponse.FromString,
                )
        self.MatchFaceFeature = channel.unary_unary(
                '/face.FaceService/MatchFaceFeature',
                request_serializer=face__pb2.MatchFaceFeatureRequest.SerializeToString,
                response_deserializer=face__pb2.MatchFaceFeatureResponse.FromString,
                )
        self.ExtractFaceFeature = channel.unary_unary(
                '/face.FaceService/ExtractFaceFeature',
                request_serializer=face__pb2.ExtractFaceFeatureRequest.SerializeToString,
                response_deserializer=face__pb2.ExtractFaceFeatureResponse.FromString,
                )
        self.InsertFaceFeature = channel.unary_unary(
                '/face.FaceService/InsertFaceFeature',
                request_serializer=face__pb2.InsertFaceFeatureRequest.SerializeToString,
                response_deserializer=face__pb2.FaceFeatureResponse.FromString,
                )
        self.DeleteFaceFeature = channel.unary_unary(
                '/face.FaceService/DeleteFaceFeature',
                request_serializer=face__pb2.DeleteFaceFeatureRequest.SerializeToString,
                response_deserializer=face__pb2.FaceFeatureResponse.FromString,
                )


class FaceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DetectFace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyFaceFeature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MatchFaceFeature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExtractFaceFeature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertFaceFeature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFaceFeature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FaceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectFace': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectFace,
                    request_deserializer=face__pb2.DetectFaceRequest.FromString,
                    response_serializer=face__pb2.DetectFaceResponse.SerializeToString,
            ),
            'VerifyFaceFeature': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyFaceFeature,
                    request_deserializer=face__pb2.VerifyFaceFeatureRequest.FromString,
                    response_serializer=face__pb2.VerifyFaceFeatureResponse.SerializeToString,
            ),
            'MatchFaceFeature': grpc.unary_unary_rpc_method_handler(
                    servicer.MatchFaceFeature,
                    request_deserializer=face__pb2.MatchFaceFeatureRequest.FromString,
                    response_serializer=face__pb2.MatchFaceFeatureResponse.SerializeToString,
            ),
            'ExtractFaceFeature': grpc.unary_unary_rpc_method_handler(
                    servicer.ExtractFaceFeature,
                    request_deserializer=face__pb2.ExtractFaceFeatureRequest.FromString,
                    response_serializer=face__pb2.ExtractFaceFeatureResponse.SerializeToString,
            ),
            'InsertFaceFeature': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertFaceFeature,
                    request_deserializer=face__pb2.InsertFaceFeatureRequest.FromString,
                    response_serializer=face__pb2.FaceFeatureResponse.SerializeToString,
            ),
            'DeleteFaceFeature': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFaceFeature,
                    request_deserializer=face__pb2.DeleteFaceFeatureRequest.FromString,
                    response_serializer=face__pb2.FaceFeatureResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'face.FaceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FaceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DetectFace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/face.FaceService/DetectFace',
            face__pb2.DetectFaceRequest.SerializeToString,
            face__pb2.DetectFaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyFaceFeature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/face.FaceService/VerifyFaceFeature',
            face__pb2.VerifyFaceFeatureRequest.SerializeToString,
            face__pb2.VerifyFaceFeatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MatchFaceFeature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/face.FaceService/MatchFaceFeature',
            face__pb2.MatchFaceFeatureRequest.SerializeToString,
            face__pb2.MatchFaceFeatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExtractFaceFeature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/face.FaceService/ExtractFaceFeature',
            face__pb2.ExtractFaceFeatureRequest.SerializeToString,
            face__pb2.ExtractFaceFeatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertFaceFeature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/face.FaceService/InsertFaceFeature',
            face__pb2.InsertFaceFeatureRequest.SerializeToString,
            face__pb2.FaceFeatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFaceFeature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/face.FaceService/DeleteFaceFeature',
            face__pb2.DeleteFaceFeatureRequest.SerializeToString,
            face__pb2.FaceFeatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
